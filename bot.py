import discord
from discord.ext import commands
import asyncio
import argparse
import random
import json
import datetime
import openai

settings = None
with open('settings.json') as file:
    settings = json.load(file)

intents = discord.Intents.default()
intents.message_content = True

bot = commands.Bot(command_prefix="!", case_insensitive=True, intents=intents)
TOKEN = settings["ds-bot-token"]
openai.api_key = settings['openai-api-key']

def datetime_string():
    current_datetime = datetime.datetime.now()
    formatted_datetime = current_datetime.strftime("%d.%m.%Y | %H:%M:%S")
    return formatted_datetime

def log(str, time=True):
    if time:
        text = datetime_string() + ' ' + str
    else:
        text = str
    with open('log.txt', 'a') as file:
        file.write(text + '\n')
    print(text)


@bot.listen()
async def on_ready():
    log('', time=False)
    log(f"| Bot is connected as {bot.user} |")
    
    #await msg('testing pesting')

@bot.command(name="ping", aliases=['p'])
async def ping_command(ctx: commands.Context):
    log(f'{ctx.author.name} : ping')

    embed = discord.Embed()
    embed.add_field(name="Latency:", value=f"{bot.latency*1000:.2f} ms")

    await ctx.send('Pong!',embed=embed)
    log(f'Pong! {bot.latency*1000:.2f} ms')

@bot.command(name='echo', aliases=['e'])
async def echo_command(ctx: commands.Context, *, message: str = ' '):
    log(f'{ctx.author.name} : echo {message}')
    await ctx.send(message)

@bot.command(name='percent', aliases=['per'])
async def percent_command(ctx: commands.Context, mention = None, role = None):
    if mention == None or role == None:
        await ctx.send('–¢–∏ —Ç—Ä–æ—à–∫–∏ –ø—Ä–æ—ó–±–∞–≤—Å—è –≤ –Ω–∞–ø–∏—Å–∞–Ω–Ω—ñ. –ü—Ä–∞–≤–∏–ª—å–Ω–æ `/percent <—Ö—Ç–æ> <–∫–∏–º>`', reference=ctx.message)
        return

    percent = random.randint(0,100)

    log(f'{ctx.author.name} : pecent {mention} {role}')

    if mention == bot.user.mention or mention == '—è' or mention == 'me':
        await ctx.send(f'{ctx.author.mention} –Ω–∞ 100% –∞—Ö—É—î–≤—à–∏–π')
    else:
        await ctx.send(f'{mention} –Ω–∞ {percent}% {role}', reference=ctx.message)

def vroll_info():
    maps = []
    with open('D:\\Documents\\python\\_bots_shared_data\\val\\maps.txt', 'r') as file:
        text = file.read()
        maps = text.split(' ')
    res = f'''
### /vroll /v
–†–æ–ª–∏—Ç—å –≥—Ä–∞–≤—Ü—ñ–≤ —ñ –∫–∞—Ä—Ç—É –¥–ª—è –∫–∞—Å—Ç–æ–º–Ω–∏—Ö –ø–æ—Å–æ—Å–∞–ª–æ–∫ –≤ –≥—ñ–≤–Ω–æ—Ä–∞–Ω—Ç—ñ

`/vroll --players (-p) <—Ö—É—î—Å–æ—Å1> <—Ö—É—î—Å–æ—Å2>..` - —Ä–æ–ª–∏—Ç—å —ñ–∑ –∑–∞–¥–∞–Ω–∏–º —Å–ø–∏—Å–∫–æ–º –≥—Ä–∞–≤—Ü—ñ–≤
—è–∫—â–æ `--players` –Ω–µ –≤–∫–∞–∑–∞–Ω–æ, —Ç–æ —Ä–æ–ª–∏—Ç—å —ñ–∑ –æ—Å—Ç–∞–Ω–Ω—ñ–º –Ω–∞–±–æ—Ä–æ–º –≥—Ä–∞–≤—Ü—ñ–≤
`/vroll --only (-o) <–∫–∞—Ä—Ç–∞1> <–∫–∞—Ä—Ç–∞2>..` - —Ä–æ–ª–∏—Ç—å —ñ–∑ –∑–∞–¥–∞–Ω–∏–º —Å–ø–∏—Å–∫–æ–º –∫–∞—Ä—Ç
`/vroll --except (-e) <–∫–∞—Ä—Ç–∞1> <–∫–∞—Ä—Ç–∞2>..` - —Ä–æ–ª–∏—Ç—å —ñ–∑ –≤—Å—ñ–º–∞ –∫–∞—Ä—Ç–∞–º–∏ –æ–∫—Ä—ñ–º –∑–∞–¥–∞–Ω–∏—Ö
`/vroll --last-maps (-lm)` - —Ä–æ–ª–∏—Ç—å —ñ–∑ –æ—Å—Ç–∞–Ω–Ω—ñ–º–∏ –∫–∞—Ä—Ç–∞–º–∏
–∫–∞—Ä—Ç–∏ –º–æ–∂–Ω–∞ –ø–∏—Å–∞—Ç–∏ —ñ –º–∞–ª–µ–Ω—å–∫–∏–º–∏ –±—É–∫–≤–∞–º–∏
`/vroll --spoilers (-s)` - –¥–æ–¥–∞—î —Ç—Ä—ñ—à–µ—á–∫–∏ —ñ–Ω—Ç—Ä–∏–≥–∏
`/vroll --help -h -?` - –¥–æ–≤—ñ–¥–∫–∞

–¥–æ—Å—Ç—É–ø–Ω—ñ –∫–∞—Ä—Ç–∏:
`{' '.join(maps)}`
'''
    return res

def vroll_wishes():
    best_before = ['–ó–Ω–æ–≤ –∫–∞—Å—Ç–æ–º–∫–∏ –≤ –≤–∞–ª—ñ–∫—É <:pain:1105874915363672135>', 
                   '–ó–Ω–æ–≤—É –≥—ñ–≤–Ω–æ —ó—Å—Ç–∏ <:maaan:977133773571375104> ', 
                   '–ù–µ–æ–±—É—á–∞—î–º—ñ <:VetalPog:1058726207576883220> ',
                   '–í–∞–º –±—É–¥–µ –≤—Å–µ–ª–æ –¥–æ –ø–æ—á–∞—Ç–∫—É –ø–µ—Ä—à–æ–≥–æ —Ä–∞—É–Ω–¥—É <:BASED:978357026776301668>']
    best_wishes_after = ['–ü—Ä–∏—î–º–Ω–æ–≥–æ —Å–æ—Å–∞–Ω–Ω—èüçå', 
                         '–û–±–µ—Ä–µ–∂–Ω–æ –Ω–µ –ø–∞–ª—ñ—Ç—å —Å—Ä–∞–∫–∏ –∑–∞–Ω–∞–¥—Ç–æ —Å–∏–ª—å–Ω–æüî•', 
                         '–ü–∞–º\'—è—Ç–∞–π—Ç–µ - <@307774926574583808> –Ω–µ –º–∞—î –æ—Å–æ–±–∏—Å—Ç–æ–≥–æ –∂–∏—Ç—Ç—èü§ì',
                         '–†–æ–∑—á–µ—Ö–ª—è–π—Ç–µ —Å—Ä–∞–∫–∏ üçë']
    wish_before = random.choice(best_before)
    wish_after = random.choice(best_wishes_after)
    return {'before':wish_before, 'after':wish_after}

def make_strings_equal_length(strings1, strings2):
    max_length = max(
        max(len(string) for string in strings1),
        max(len(string) for string in strings2)
    )

    modified_strings1 = []
    modified_strings2 = []

    for string in strings1:
        if len(string) < max_length:
            modified_string = string + ' ' * (max_length - len(string))
        else:
            modified_string = string
        modified_strings1.append(modified_string)

    for string in strings2:
        if len(string) < max_length:
            modified_string = string + ' ' * (max_length - len(string))
        else:
            modified_string = string
        modified_strings2.append(modified_string)

    return modified_strings1, modified_strings2

@bot.command(name='vroll', 
             aliases=['v'], 
             help='For more info type !vroll --help')
async def vroll_command(ctx: commands.Context, *args):   
    log(f'{ctx.author.name} : vroll') 
    # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–∞—Ä—Å–µ—Ä–∞ –∞—Ä–≥—É–º–µ–Ω—Ç—ñ–≤
    parser = argparse.ArgumentParser(add_help=False)
    parser.add_argument('--help', '-h', '-?', action='store_true')
    parser.add_argument('--last-maps', '-lm', action='store_true')
    parser.add_argument('--spoilers', '-s', action='store_true')
    parser.add_argument('--players', '-p', nargs='+')
    parser.add_argument('--exc', '-e', nargs='+')
    parser.add_argument('--only', '-o', nargs='+')

    # –†–æ–∑–±—ñ—Ä –∞—Ä–≥—É–º–µ–Ω—Ç—ñ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–≥–æ —Ä—è–¥–∫–∞
    try:
        args = parser.parse_args(args)
    except SystemExit as e:
        #error_text = f'–®–æ—Å—å —Ç–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –Ω–∞—Ç–∏–∫–∞–≤, –∑–∞–ø–∏—à—É —Ç–µ–±–µ –≤ —Å–ø–∏—Å–æ–∫ –ø—ñ–¥–∞—Ä—ñ–≤ –∞–ª–µ –ø–æ–∫–∏ —à–æ —Ç—ñ–ª—å–∫–∏ –æ–ª—ñ–≤—Ü–µ–ºüìù'
        #log('INPUT EXCEPTION')
        #context.bot.send_message(chat_id=message.chat_id, text=error_text, parse_mode='HTML')
        return

    if args.help:
        await ctx.send(vroll_info())
        return
    
    players = []
    val_last_players_file = 'D:\\Documents\\python\\_bots_shared_data\\val\\last_players.txt'
    if args.players:
            players = args.players
            with open(val_last_players_file, 'w') as file:
                file.write(' '.join(players))
    else:
        with open(val_last_players_file, 'r') as file:
            text = file.read()
            players = text.split(' ')

    maps = []
    val_last_maps_file = 'D:\\Documents\\python\\_bots_shared_data\\val\\last_maps.txt'
    if args.last_maps:
        with open(val_last_maps_file, 'r') as file:
            text = file.read()
            maps = text.split(' ')
    else:
        with open('D:\\Documents\\python\\_bots_shared_data\\val\\maps.txt', 'r') as file:
            text = file.read()
            maps = text.split(' ')
        if args.exc:
            except_maps = args.exc
            maps = [element for element in maps if element.lower() not in [em.lower() for em in except_maps]]
        elif args.only:
            only_maps = args.only
            maps = [element for element in maps if element.lower() in [em.lower() for em in only_maps]]

        with open(val_last_maps_file, 'w') as file:
                file.write(' '.join(maps))
    
    wishes = vroll_wishes()

    text_info = f'''
*{wishes['before']}*
**–í–∏–±–∏—Ä–∞—é —ñ–∑ –∫–∞—Ä—Ç**:
`{' '.join(maps)}`
**–•—É—î—Å–æ—Å–∏**:
`{' '.join(players)}`
–¥–ª—è –∫–∞—Å—Ç–æ–º–Ω–∏—Ö –ø–æ—Å–æ—Å–∞–ª–æ–∫
'''

    await ctx.send(text_info, reference=ctx.message)

    rand_map = maps[random.randint(0,len(maps)-1)]
    team_atk = []
    team_def = []
    for i in range(int(len(players)/2)):
        team_def.append(players.pop(random.randint(0,len(players)-1)))
    team_atk = players

    text_team_atk = None
    text_team_def = None

    if args.spoilers:
        rand_map = '||'+rand_map+'||'

        team_atk, team_def = make_strings_equal_length(team_atk, team_def)

        text_team_atk = '\n'.join(['‚ôøÔ∏è ||`' + m + '`||' for m in team_atk])
        text_team_def = '\n'.join(['‚ôøÔ∏è ||`' + m + '`||' for m in team_def])
    else:
        text_team_atk = '\n'.join(['‚ôøÔ∏è *' + m + '*' for m in team_atk])
        text_team_def = '\n'.join(['‚ôøÔ∏è *' + m + '*' for m in team_def])

    text_result = f'''
>>> ### üçÜ–°–æ—Å–∞–Ω–Ω—è –≤—ñ–¥–±—É–≤–∞—î—Ç—å—Å—è –Ω–∞ –º–∞–ø—ñ üèû __{rand_map}__ üèû
    
üí•**–ê—Ç–∞–∫–µ—Ä–∏:**
{text_team_atk}

üõ°**–î–µ—Ñ–µ–Ω–¥–µ—Ä–∏:**
{text_team_def}

{wishes['after']}'''

    await ctx.send(text_result)

def generate_gpt_response(prompt):
    response = openai.Completion.create(
        engine='text-davinci-003',  # –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –º–æ–¥–µ–ª—ñ ChatGPT
        prompt=prompt,
        max_tokens=1000,  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ç–æ–∫–µ–Ω—ñ–≤ –≤ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
        temperature=1,  # –ü–∞—Ä–∞–º–µ—Ç—Ä, —â–æ –∫–æ–Ω—Ç—Ä–æ–ª—é—î "—Ç–≤–æ—Ä—á—ñ—Å—Ç—å" –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π (–≤—ñ–¥ 0 –¥–æ 1)
        n=1,  # –ö—ñ–ª—å–∫—ñ—Å—Ç—å –≤–∞—Ä—ñ–∞–Ω—Ç—ñ–≤ –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó
        stop=None,  # –†—è–¥–æ–∫, —â–æ –≤–∫–∞–∑—É—î, –∫–æ–ª–∏ –∑—É–ø–∏–Ω–∏—Ç–∏ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—é —Ç–µ–∫—Å—Ç—É
    )
    return response.choices[0].text.strip()

@bot.command(name='gpt')
async def gpt_command(ctx, *, query=' '):
    if ctx.message.reference:
        query = ctx.message.reference.resolved.content

    log(f'{ctx.author.name} –≤–∏—Ç—Ä–∞—Ç–∏–≤ —Ç–≤–æ—ó –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω—ñ –¥–æ–ª–∞—Ä–∏ : gpt {query}') 
    message = await ctx.send(f'*–î–∞–π –ø–æ–¥—É–º–∞—Ç–∏ {query}*', reference=ctx.message)

    # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –æ–∫—Ä–µ–º–æ–≥–æ –∑–∞–≤–¥–∞–Ω–Ω—è (job) –¥–ª—è some_task()
    asyncio.create_task(gpt_task(message, query))

async def gpt_task(message, query):
    try:
        response = generate_gpt_response(query)
    except:
        await message.edit(content='–°—Ç–∞–ª–∞—Å—è —è–∫–∞—Å—å —Ö—É–π–Ω—è. –Ø –ø–æ–ª–æ–º–∞–≤—Å—è‚ò†Ô∏è')
        log('ERROR on gpt response')
        return
    log(f'response to {query} : {response}')
    # –ó–º—ñ–Ω–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—ñ—Å–ª—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –∑–∞–¥–∞—á—ñ
    await message.edit(content='>>> ' + response)

async def msg(msg):
    print('entry')
    channel_id = 1110582353828528182
    server_id = 1110582353828528179
    message = msg

    channel = bot.get_channel(channel_id)
    server = bot.get_guild(server_id)

    print(channel)
    print(server)

    if channel and server:
        target_channel = server.get_channel(channel.id)
        await target_channel.send(message)
    else:
        print("–ü–æ–º–∏–ª–∫–∞: –Ω–µ–º–æ–∂–ª–∏–≤–æ –∑–Ω–∞–π—Ç–∏ —Å–µ—Ä–≤–µ—Ä –∞–±–æ –∫–∞–Ω–∞–ª")


bot.run(TOKEN)
